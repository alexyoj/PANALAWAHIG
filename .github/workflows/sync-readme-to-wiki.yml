name: Sync README to Miraheze Wiki
on:
  push:
    paths:
      - README.md    # Trigger this workflow when README.md changes
  workflow_dispatch:  # Allows you to manually trigger this workflow
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Sync README.md to Miraheze Wiki
        run: |
          # Extract the content between markers
          CONTENT=$(python -c "
          import re
          with open('README.md', 'r') as f:
              content = f.read()
          pattern = re.compile(r'<!-- START MIRAHEZE CONTENT -->(.*?)<!-- END MIRAHEZE CONTENT -->', re.DOTALL)
          match = pattern.search(content)
          if match:
              print(match.group(1).strip())
          else:
              print(content)
          ")
          
          # Use Python to handle the API call properly
          python -c "
          import requests
          import os
          
          content = '''$CONTENT'''
          
          # Setup API parameters
          api_url = 'https://panalawahigdocs.miraheze.org/w/api.php'
          username = '${{ secrets.MIRAHEZE_USERNAME }}'
          password = '${{ secrets.MIRAHEZE_PASSWORD }}'
          
          # First, get a login token
          params_token = {
              'action': 'query',
              'meta': 'tokens',
              'type': 'login',
              'format': 'json'
          }
          
          try:
              r = requests.get(api_url, params=params_token)
              r.raise_for_status()
              login_token = r.json()['query']['tokens']['logintoken']
              
              # Login with the token
              params_login = {
                  'action': 'login',
                  'lgname': username,
                  'lgpassword': password,
                  'lgtoken': login_token,
                  'format': 'json'
              }
              r = requests.post(api_url, data=params_login)
              r.raise_for_status()
              
              # Get a CSRF token for editing
              params_csrf = {
                  'action': 'query',
                  'meta': 'tokens',
                  'format': 'json'
              }
              r = requests.get(api_url, params=params_csrf, cookies=r.cookies)
              r.raise_for_status()
              csrf_token = r.json()['query']['tokens']['csrftoken']
              
              # Make the edit
              params_edit = {
                  'action': 'edit',
                  'title': 'Main_Page',
                  'text': content,
                  'bot': True,
                  'token': csrf_token,
                  'format': 'json'
              }
              r = requests.post(api_url, data=params_edit, cookies=r.cookies)
              r.raise_for_status()
              
              print('Successfully updated Miraheze wiki!')
              
          except Exception as e:
              print(f'Error updating wiki: {e}')
              exit(1)
          "
